package com.edu.pattern.strategy;

public class Strategy {
    /**
     * 策略模式：
     * 比较器、旅行路线、固定算法、买东西结算支付、第三方登录
     *
     * 场景：根据用户的需求处理数据时候需要对算法做出选择，固定的一些算法
     * （不再发生变化的算法），扩展
     *
     * 客户本身他知道采用什么算法去计算
     *
     * 支付流程：选择商品->购物车->下单->结算->支付->物流
     */

    /**
     * 用设计模式，是用来解决复杂问题，把复杂的问题变得简单化
     *
     * 一个系统需要动态的在几种算法中选择一种
     *
     *
     *
     */
}
